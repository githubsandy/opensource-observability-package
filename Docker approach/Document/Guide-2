I'll create a markdown document for you with all the content we've covered about the Open Source Observability Stack implementation.

```markdown
# Open Source Observability Stack Implementation - Project Documentation

## Table of Contents
1. [Project Overview](#project-overview)
2. [Component Architecture](#component-architecture)
3. [Implementation Approach](#implementation-approach)
4. [Configuration Files](#configuration-files)
5. [Installation Guide](#installation-guide)
6. [Visualization Setup](#visualization-setup)
7. [Troubleshooting](#troubleshooting)
8. [Next Steps](#next-steps)

## Project Overview

### Purpose and Scope
The Open Source Observability Package provides a complete monitoring solution using open-source tools. It's designed for on-premises environments where commercial solutions like Splunk may not be viable due to licensing constraints or customer preferences.

### Components
- **Prometheus**: Time-series database for metrics collection
- **Node Exporter**: System metrics collection agent
- **Loki**: Log aggregation system
- **Promtail**: Log collection agent
- **Grafana**: Visualization platform

### Target Environment
- On-premises deployments
- Environments with licensing constraints
- Development and testing environments

## Component Architecture

### System Diagram
```
┌─────────────┐     ┌─────────────┐
│             │     │             │
│ Prometheus  │◄────┤Node Exporter│
│             │     │             │
└──────┬──────┘     └─────────────┘
       │
       │            ┌─────────────┐     ┌─────────────┐
       │            │             │     │             │
       └───────────►│   Grafana   │◄────┤    Loki     │◄────┐
                    │             │     │             │     │
                    └─────────────┘     └─────────────┘     │
                                                            │
                                                      ┌─────┴─────┐
                                                      │           │
                                                      │ Promtail  │
                                                      │           │
                                                      └───────────┘
```

### Component Descriptions
- **Prometheus**: Collects and stores metrics, provides query language
- **Node Exporter**: Exposes hardware and OS metrics
- **Loki**: Stores and indexes logs
- **Promtail**: Ships logs to Loki
- **Grafana**: Visualizes metrics and logs

## Implementation Approach

### Deployment Strategy
Initial deployment uses Docker Compose for simplicity and rapid setup.
Production deployment will use Ansible for automation and repeatability.

### Installation Order
1. Prometheus
2. Node Exporter
3. Loki
4. Grafana
5. Promtail

## Configuration Files

### Docker Compose Configuration
```yaml
name: observability-stack

services:
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    restart: unless-stopped
    networks:
      - observability
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M

  node-exporter:
    image: prom/node-exporter:v1.6.1
    container_name: node-exporter
    ports:
      - "9100:9100"
    restart: unless-stopped
    networks:
      - observability
    deploy:
      resources:
        limits:
          memory: 256M

  loki:
    image: grafana/loki:2.9.7
    container_name: loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    restart: unless-stopped
    networks:
      - observability
    deploy:
      resources:
        limits:
          memory: 512M

  grafana:
    image: grafana/grafana:10.0.3
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    restart: unless-stopped
    networks:
      - observability
    deploy:
      resources:
        limits:
          memory: 512M

  promtail:
    image: grafana/promtail:2.9.7
    container_name: promtail
    ports:
      - "9080:9080"
    volumes:
      - ./promtail-config.yml:/etc/promtail/config.yml
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    networks:
      - observability
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M

networks:
  observability:
    driver: bridge
```

### Prometheus Configuration
```yaml
global:
  scrape_interval: 15s

scrape_configs:
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090']

  - job_name: 'node-exporter'
    static_configs:
      - targets: ['node-exporter:9100']
```

### Promtail Configuration
```yaml
server:
  http_listen_port: 9080
  grpc_listen_port: 0

positions:
  filename: /tmp/positions.yaml

clients:
  - url: http://loki:3100/loki/api/v1/push

scrape_configs:
  - job_name: docker
    static_configs:
      - targets:
          - localhost
        labels:
          job: docker
          __path__: /var/lib/docker/containers/*/*-json.log
    pipeline_stages:
      - json:
          expressions:
            output: log
            stream: stream
            timestamp: time
      - labels:
          stream:
      - output:
          source: output
```

## Installation Guide

### Prerequisites
```bash
# Check Docker installation
docker --version
docker compose version

# Check available ports
lsof -i :9090  # Prometheus
lsof -i :9100  # Node Exporter
lsof -i :3100  # Loki
lsof -i :3000  # Grafana
lsof -i :9080  # Promtail
```

### System Requirements
- OS: macOS, Linux, or Windows
- RAM: 4GB minimum
- Disk: 10GB minimum
- Docker Engine: 20.10+
- Docker Compose: 2.0+

### Project Setup
```bash
# Create project directory
mkdir -p ~/Documents/opensource-observability-package/Docker\ approach
cd ~/Documents/opensource-observability-package/Docker\ approach

# Create configuration files
touch docker-compose.yml
touch prometheus.yml
touch promtail-config.yml
```

### Deployment Steps
```bash
# Navigate to project directory
cd ~/Documents/opensource-observability-package/Docker\ approach

# Start the stack
docker compose up -d

# Verify services
docker ps

# Check logs
docker compose logs
```

## Visualization Setup

### Grafana Data Source Configuration
1. **Access Grafana**
   - URL: http://localhost:3000
   - Username: admin
   - Password: admin

2. **Add Prometheus Data Source**
   - Name: Prometheus
   - Type: Prometheus
   - URL: http://prometheus:9090
   - Access: Server (default)

3. **Add Loki Data Source**
   - Name: Loki
   - Type: Loki
   - URL: http://loki:3100
   - Access: Server (default)

### Example Dashboards
1. **Node Exporter Dashboard**
   - Import dashboard ID: 1860
   - Name: Node Exporter Full
   - Data source: Prometheus

2. **Prometheus Stats**
   - Import dashboard ID: 3662
   - Name: Prometheus 2.0 Overview
   - Data source: Prometheus

### Example Queries

**Prometheus Queries:**
```
# CPU Usage
rate(node_cpu_seconds_total{mode!="idle"}[5m])

# Memory Usage
1 - (node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes)

# Disk Space
node_filesystem_avail_bytes

# Network Traffic
rate(node_network_receive_bytes_total[5m])
```

**Loki Queries:**
```
# All container logs
{job="docker"}

# Error logs
{job="docker"} |= "error"

# Logs from specific container
{container="prometheus"}
```

## Troubleshooting

### Common Issues

1. **Connection Refused**
```bash
# Check if container is running
docker ps | grep <container_name>

# Check container logs
docker logs <container_name>

# Verify network connectivity
docker network inspect observability
```

2. **No Logs in Loki**
```bash
# Check Promtail logs
docker logs promtail

# Verify Promtail configuration
docker exec promtail cat /etc/promtail/config.yml

# Check if Promtail can access Docker logs
docker exec promtail ls -l /var/lib/docker/containers
```

3. **Prometheus Not Scraping**
```bash
# Check Prometheus targets
curl http://localhost:9090/api/v1/targets

# Verify Prometheus configuration
docker exec prometheus cat /etc/prometheus/prometheus.yml
```

### Restart Services
```bash
# Restart specific service
docker compose restart <service_name>

# Restart entire stack
docker compose restart
```

### Clean Up
```bash
# Stop the stack
docker compose down

# Remove all stopped containers
docker system prune

# Remove volumes (caution: deletes data)
docker volume prune
```

## Next Steps

### Production Deployment
1. Create Ansible playbooks for automated deployment
2. Add persistent storage for metrics and logs
3. Implement backup and restore procedures
4. Set up alerting with AlertManager

### Advanced Configuration
1. Add additional exporters (e.g., MySQL, Redis)
2. Configure high availability
3. Implement security hardening
4. Add user authentication and authorization

### Maintenance
1. Create update procedures
2. Implement monitoring of the monitoring stack
3. Document backup and restore procedures
4. Establish capacity planning guidelines

## Git Repository Management

### Initialize Repository
```bash
# Navigate to project directory
cd ~/Documents/opensource-observability-package

# Initialize git repository
git init
```

### Add .gitignore
```
# Docker volumes
data/

# Environment files
.env

# Logs
*.log

# System files
.DS_Store

# IDE files
.vscode/
.idea/
```

### Commit and Push
```bash
# Add all files
git add .

# Commit changes
git commit -m "Initial commit: Open Source Observability Package"

# Add remote repository
git remote add origin https://github.com/yourusername/opensource-observability-package.git

# Push to main branch
git push -u origin main
```

### Push Individual Files
```bash
# Add specific file
git add Docker\ approach/docker-compose.yml

# Commit file
git commit -m "Add Docker Compose configuration"

# Push to main
git push origin main
```
```

This markdown document contains all the essential information about the Open Source Observability Stack implementation we've been working on. You can download and save this as a README.md file in your project repository for reference.This markdown document contains all the essential information about the Open Source Observability Stack implementation we've been working on. You can download and save this as a README.md file in your project repository for reference.